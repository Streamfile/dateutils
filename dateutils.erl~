% Copyright (c) 2009, Jonas Enlund
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without 
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright notice,
%       this list of conditions and the following disclaimer.
%     * Redistributions in binary form must reproduce the above copyright 
%       notice, this list of conditions and the following disclaimer in the 
%       documentation and/or other materials provided with the distribution.
%     * Neither the name of the <ORGANIZATION> nor the names of its contributors 
%       may be used to endorse or promote products derived from this software 
%       without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-module(dateutils).

-export([make_parser/1, make_writer/1, add/3, add/2, days_diff/2]).

-define(FULL_YEAR, "Y").
-define(DAY_OF_MONTH_WITH_LEADING_ZEROES, "d").
-define(DAY_OF_MONTH_WITHOUT_LEADING_ZEROES, "D").
-define(MONTH_WITH_LEADING_ZEROES, "m").
-define(MONTH_WITHOUT_LEADING_ZEROES, "M").


% A full numeric representation of a year
parse_date(?FULL_YEAR ++ XS, [Y1,Y2,Y3,Y4|YS], {_YYYY, MM, DD}) ->
    parse_date(XS, YS, {list_to_integer([Y1, Y2, Y3, Y4]), MM, DD});


% Day of the month, with leading zeros
parse_date(?DAY_OF_MONTH_WITH_LEADING_ZEROES ++ XS, [Y1,Y2|YS], {YYYY, MM, _DD}) ->
    parse_date(XS, YS, {YYYY, MM, list_to_integer([Y1,Y2])});


% Day of the month, without leading zeroes
parse_date(?DAY_OF_MONTH_WITHOUT_LEADING_ZEROES ++ XS, [Y1,Y2|YS], {YYYY, MM, _DD}) ->
    try parse_date(XS, YS, {YYYY, MM, list_to_integer([Y1,Y2])}) 
    catch
	_:_ -> parse_date(XS, [Y2|YS], {YYYY, MM, list_to_integer([Y1])})
    end;
parse_date(?DAY_OF_MONTH_WITHOUT_LEADING_ZEROES ++ XS, [Y1], {YYYY, MM, _DD}) ->
    parse_date(XS, [], {YYYY, MM, list_to_integer([Y1])});


% Numeric representation of a month, with leading zeros
parse_date(?MONTH_WITH_LEADING_ZEROES ++ XS, [Y1,Y2|YS], {YYYY, _MM, DD}) ->
    parse_date(XS, YS, {YYYY, list_to_integer([Y1, Y2]), DD});


% Numeric representation of a month, without leading zeros
parse_date(?MONTH_WITHOUT_LEADING_ZEROES ++ XS, [Y1, Y2|YS], {YYYY, _MM, DD}) ->
    try parse_date(XS, YS, {YYYY, list_to_integer([Y1, Y2]), DD})
    catch
	_:_ -> parse_date(XS, [Y2|YS], {YYYY, list_to_integer([Y1]), DD})
    end;
parse_date(?MONTH_WITHOUT_LEADING_ZEROES ++ XS, [Y1], {YYYY, _MM, DD}) ->
    parse_date(XS, [], {YYYY, list_to_integer([Y1]), DD});


% Literal characters must be identical. 
parse_date([X|XS], [X|YS], Date) ->
    parse_date(XS, YS, Date);

% End of input.
parse_date([], [], Date) ->
    case calendar:valid_date(Date) of
	true -> Date;
	false -> noparse 
    end.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% make_parser/1 returns a parser that parses dates
%% according to the specified format.
%% 
%% Example:
%% > Parse = dateutils:make_parser(Y/M/D).
%% > Parse("2009/12/24").
%% {2009,12,24}
%% > Parse("2009-12-24").
%% noparse
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
make_parser(Format) ->
    fun(DateString) ->
	    try
		parse_date(Format, DateString, date())
	    catch
		_:_ -> noparse
	    end
    end.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% make_writer/1 creates a printer which prints dates
%% according to the specified format.
%%
%% Example
%% > ToString = dateutils:make_writer("D.M Y").
%% > ToString(date()).
%% 5.6 2009
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
make_writer(Format) ->
    fun(Date) ->
	    to_string(Format, Date)
    end.


to_string(?FULL_YEAR ++ XS, {YYYY, MM, DD}) ->
    integer_to_list(YYYY) ++ to_string(XS, {YYYY, MM, DD});
to_string(?MONTH_WITHOUT_LEADING_ZEROES ++ XS, {YYYY, MM, DD}) ->
    integer_to_list(MM) ++ to_string(XS, {YYYY, MM, DD});
to_string(?DAY_OF_MONTH_WITHOUT_LEADING_ZEROES ++ XS, {YYYY, MM, DD}) ->
    integer_to_list(DD) ++ to_string(XS, {YYYY, MM, DD});
to_string([X|XS], Date) ->
    [X|to_string(XS, Date)];
to_string([], _) ->
    [].


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% add/3 adds days months or years to a specified
%% date
%%
%% Example:
%% dateutils:add(date(), 3, days)
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


add({_YYYY, _MM, _DD}=Date, N, days) ->
    D1 = calendar:date_to_gregorian_days(Date),
    D2 = D1 + N,
    calendar:gregorian_days_to_date(D2);


%% 
% Adding months is a bit tricky.
% 
add({YYYY, MM, DD}=Date, 0, months) ->
    case calendar:valid_date(Date) of
	true  -> Date;
	false -> add({YYYY, MM, DD-1}, 0, months)
    end;

add({YYYY, MM, DD}, N, months) when N > 0 andalso MM < 12 ->
    add({YYYY, MM+1, DD}, N-1, months);
add({YYYY, MM, DD}, N, months) when N > 0 andalso MM =:= 12 ->
    add({YYYY+1, 1, DD}, N-1, months); 
add({YYYY, MM, DD}, N, months) when N < 0 andalso MM > 1 ->
    add({YYYY, MM-1, DD}, N+1, months);
add({YYYY, MM, DD}, N, months) when N < 0 andalso MM =:= 1 ->
    add({YYYY-1, 12, DD}, N+1, months);

add(Date, N, years) ->
    add(Date, 12*N, months).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% add/2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
add(Date, day) ->
    add(Date, 1);
add(Date, month) ->
    add(Date, 1, months);
add(Date, year) ->
    add(Date, 1, years);
add(Date, N)  ->
    add(Date, N, days).


